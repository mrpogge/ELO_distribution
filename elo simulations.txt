setwd("C:/Work files/Veni/Elo paper")
dyn.load('elo_for_simulations.dll')
source('elo functions.R')

# Fixed items, non-adaptive selection

K=c(0.1,0.2,0.3,0.4,0.5,0.3,0.3)
s_d=c(rep(1,5),2,1)
true_items=c(rep(1,6),0)

Design=cbind(K,s_d,true_items)

res_fixed_nonadaptive=list()
for(j in 1:nrow(Design)){
	K=Design[j,1]
	s_d=Design[j,2]
	true_items=Design[j,3]
	games=1000
	if(j==3){games=5500} # 10 times more post-burnin iterations in the baseline condition to have a better estimate of the variances
        if(K==0.1){games=2000} # longer chains to make sure that it converges for smaller K
	if(K==0.2){games=1250}
	res_fixed_nonadaptive[[j]]=elo(n=500,m=100,reps=200,games=games,K=K,m_d=0,s_d=s_d,fixed_items=1,items_true=true_items)
	save(res_fixed_nonadaptive,file='ResultsFixedAdaptive.RData')
}

# time estimate 205 seconds for n=500,m=100,reps=200. It will increase by 2, then n=1000, m=200, so about 7 minutes.

# Fixed items, adaptive item selection

K=c(0.1,0.2,0.3,0.4,0.5,0.3,0.3,0.3,0.3)
s_d=c(rep(1,5),2,1,1,1)
true_items=c(rep(1,6),0,1,1)
mP=c(rep(0,7),log(3),0)
sP=c(rep(0.5,8),0.25)

Design=cbind(K,s_d,true_items,mP,sP)

res_fixed_adaptive=list()
for(j in 1:nrow(Design)){
	K=Design[j,1]
	s_d=Design[j,2]
	true_items=Design[j,3]
	mP=Design[j,4]
	sP=Design[j,5]
	games=1000
	if(j==3){games=5500} # 10 times more post-burnin iterations in the baseline condition to have a better estimate of the variances
        if(K==0.1){games=2000} # longer chains to make sure that it converges for smaller K
	if(K==0.2){games=1250}
	res_fixed_adaptive[[j]]=elo(n=500,m=100,reps=10,games=games,K=K,m_d=0,s_d=s_d,mP=mP,sP=sP,adaptive=1,fixed_items=1,items_true=true_items)
	save(res_fixed_adaptive,file='ResultsFixedAdaptive.RData')
}

# time estimate for n=500, m=100, reps=10 is 331 seconds. It will increase by 2x2x20=80 when n=1000, m=200, reps=200, so about 6.5 hours

# Non-fixed items, nonadaptive selection

K=c(0.1,0.2,0.3,0.4,0.5,0.3,0.3)
s_d=c(rep(1,5),2,1)
m_d=c(rep(0,6),-log(3))

Design=cbind(K,s_d,m_d)

res_nonadaptive=list()
for(j in 1:nrow(Design)){
	K=Design[j,1]
	s_d=Design[j,2]
	m_d=Design[j,3]
	games=1000
       if(j==3){games=5500} # 10 times more post-burnin iterations in the baseline condition to have a better estimate of the variances
        if(K==0.1){games=2000} # longer chains to make sure that it converges for smaller K
	if(K==0.2){games=1250}
	res_nonadaptive[[j]]=elo(n=500,m=100,reps=100,games=games,K=K,m_d=m_d,s_d=s_d)
	save(res_nonadaptive,file='ResultsNonadaptive.RData')
}

# time estimate for n=500, m=100, reps=100 is 104 seconds. It will increase by 2x2=4 when n=1000, m=200, reps=200, so about 7 minutes

# Non-fixed items, adaptive selection

K=c(0.1,0.2,0.3,0.4,0.5,0.3,0.3,0.3,0.3)
s_d=c(rep(1,5),2,1,1,1)
m_d=c(rep(0,6),-log(3),0,0)
mP=c(rep(0,7),log(3),0)
sP=c(rep(0.5,8),0.25)

Design=cbind(K,s_d,m_d,mP,sP)

res_adaptive=list()
for(j in 1:nrow(Design)){
	K=Design[j,1]
	s_d=Design[j,2]
	m_d=Design[j,3]
	mP=Design[j,4]
	sP=Design[j,5]
	games=1000
        if(j==3){games=5500} # 10 times more post-burnin iterations in the baseline condition to have a better estimate of the variances
        if(K==0.1){games=2000} # longer chains to make sure that it converges for smaller K
	if(K==0.2){games=1250}
	res_adaptive[[j]]=elo(n=500,m=100,reps=10,games=games,K=K,m_d=m_d,s_d=s_d,adaptive=1,mP=mP,sP=sP)
	save(res_adaptive,file='ResultsAdaptive.RData')
}

# time estimate for n=500, m=100, reps=10 is 280 seconds. It will increase by 2x2x20=80 when n=1000, m=200, reps=200, so 6.5 hours

# Adaptive scenarios with the Double Elo algorithm

K=c(0.1,0.2,0.3,0.4,0.5,0.3,0.3,0.3,0.3)
s_d=c(rep(1,5),2,1,1,1)
m_d=c(rep(0,6),-log(3),0,0)
mP=c(rep(0,7),log(3),0)
sP=c(rep(0.5,8),0.25)

Design=cbind(K,s_d,m_d,mP,sP)
res_double=list()
for(j in 1:nrow(Design)){
	K=Design[j,1]
	s_d=Design[j,2]
	m_d=Design[j,3]
	mP=Design[j,4]
	sP=Design[j,5]
	games=1000
        if(sum(Design[j,])==1.8){games=5500} # 10 times more post-burnin iterations in the baseline condition to have a better estimate of the variances
        if(K==0.1){games=2000} # longer chains to make sure that it converges for smaller K
	if(K==0.2){games=1250}
	res_double[[j]]=elo_double(n=100,m=20,reps=10,games=games,K=K,mP=mP,sP=sP,m_d=m_d,s_d=s_d)
	save(res_double,Design,file="ResultsDoubleElo.RData")
}

# time estimate for n=100, m=20, reps=10 is 27 seconds. It will increase by 10x10x20=2000 when n=1000, m=200, reps=200, so about 15 hours. 




